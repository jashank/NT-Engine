#ifndef GAMESTATE_H
#define GAMESTATE_H

#include <string>
#include <map>

extern "C" {
  #include "lauxlib.h"
}

#include "GameObjectManager.h"
#include "GUIManager.h"
#include "SoundManager.h"
#include "TileManager.h"

class lua_State;

/*! \class GameState
 *- Generic class for all states in the game. Data defined in XML file.
 *  Provides functions to Lua, allowing it access information on, and
 *  manipulate the state.
*/
class GameState {
 public:
  /// Constructs GameState. Doesn't load in any data.
  GameState() {}
  ~GameState() {}

  /// Loads GameState from file located at path passed.
  bool LoadFromFile( const std::string &path );

  /// Handles events generated by user
  void HandleEvents();

  /// Updates to changes made since last frame
  void Update();

  /// Renders current frame
  void Render();

  /// Returns state's tile Manager
  TileManager& GetTileManager();

  /// Returns state's GameObjectManager
  GameObjectManager& GetGameObjectManager();

  /*************************************
   * Lua Functions
   *************************************/
  /// Registers lua functions to state passed
  static void RegisterLuaFuncs( lua_State *L );

  /// Changes state to unmodified version of state defined by XML file passed.
  /// Reports error if file is invalid.
  static int LuaNewState( lua_State *L );

  /// Resets the current state.
  static int LuaResetState( lua_State *L );

  /// User passes name of portal specified in state file, and next state is
  /// set to the path specified with it
  static int LuaPortal( lua_State *L );

  /// Returns name of state
  static int LuaGetName( lua_State *L );

  /// Allows user to log errors from Lua
  static int LuaLogErr( lua_State *L );

 private:
  static const luaL_Reg LuaFuncs[]; // Functions to register to Lua

  /// Restricts copy constructor, and assignment.
  GameState( const GameState &state );
  GameState& operator=( const GameState &state );

  GameObjectManager m_gameObjectManager;
  GUIManager m_guiManager;
  SoundManager m_soundManager;
  std::map<std::string, std::string> m_portals; // Mappings name/path
  std::string m_path; // Path to current state
  std::string m_name; // Name of current state (just name of file)
  TileManager m_tileManager;
};

#endif
